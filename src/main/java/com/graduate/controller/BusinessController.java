package com.graduate.controller;

import com.graduate.entity.Business;
import com.graduate.repository.BusinessRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

import java.util.Objects;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/business") // This means URL's start with /demo (after Application path)
public class BusinessController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BusinessRepository businessRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody Business addNewBusiness (@RequestBody final Business request) {
        return businessRepository.save(request);
    }

    @PutMapping(path="/edit/{serviceId}")
    public @ResponseBody Business editBusiness (@PathVariable final Integer serviceId,
                                        @Validated @RequestBody final Business request) {
        return businessRepository.findById(serviceId)
                .map(business -> {
                    business.setServiceName(Objects.isNull(request.getServiceName()) ? business.getServiceName() : request.getServiceName());
                    business.setServiceType(Objects.isNull(request.getServiceType()) ? business.getServiceType() : request.getServiceType());
                    business.setReleaseTime(Objects.isNull(request.getReleaseTime()) ? business.getReleaseTime() : request.getReleaseTime());
                    return businessRepository.save(business);
                })
                .orElseGet(() -> {
                    request.setServiceId(serviceId);
                    return businessRepository.save(request);
                });
}
    @DeleteMapping(path="/{serviceId}")
    public ResponseEntity deleteBusiness (@PathVariable final Integer serviceId) {
        businessRepository.deleteById(serviceId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Business> getAllBusinesses() {
        // This returns a JSON or XML with the users
        return businessRepository.findAll();
    }
}
