package com.graduate.controller;

import com.graduate.entity.User;
import com.graduate.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.Objects;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody User addNewUser (@RequestBody final User request) {
        return userRepository.save(request);
    }

    @PutMapping(path="/edit/{id}")
    public @ResponseBody User editUser (@PathVariable final Integer id,
                                        @Validated @RequestBody final User request) {
        return userRepository.findById(id)
                .map(user -> {
                    user.setName(Objects.isNull(request.getName()) ? user.getName() : request.getName());
                    user.setRole(Objects.isNull(request.getRole()) ? user.getRole() : request.getRole());
                    user.setAge(Objects.isNull(request.getAge()) ? user.getAge() : request.getAge());
                    user.setEmail(Objects.isNull(request.getEmail()) ? user.getEmail() : request.getEmail());
                    user.setCompany(Objects.isNull(request.getCompany()) ? user.getCompany() : request.getCompany());
                    user.setSex(Objects.isNull(request.getSex()) ? user.getSex() : request.getSex());
                    return userRepository.save(user);
                })
                .orElseGet(() -> {
                    request.setId(id);
                    return userRepository.save(request);
                });
    }

    @DeleteMapping(path="/{id}")
    public ResponseEntity deleteUser (@PathVariable final Integer id) {
        userRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Optional<User> getUserById(@PathVariable final Integer id) {
        // This returns a JSON or XML with the users
        return userRepository.findById(id);
    }
}
