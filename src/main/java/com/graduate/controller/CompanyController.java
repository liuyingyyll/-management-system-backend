package com.graduate.controller;

import com.graduate.entity.Business;
import com.graduate.entity.Company;
import com.graduate.repository.BusinessRepository;
import com.graduate.repository.CompanyRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

import java.util.Objects;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/company") // This means URL's start with /demo (after Application path)
public class CompanyController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CompanyRepository companyRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody
    Company addNewCompany (@RequestBody final Company request) {
        return companyRepository.save(request);
    }

    @PutMapping(path="/edit/{companyId}")
    public @ResponseBody Company editCompany (@PathVariable final Integer companyId,
                                                @Validated @RequestBody final Company request) {
        return companyRepository.findById(companyId)
                .map(company -> {
                    company.setCompanyName(Objects.isNull(request.getCompanyName()) ? company.getCompanyName() : request.getCompanyName());
                    company.setCompanyBase(Objects.isNull(request.getCompanyBase()) ? company.getCompanyBase() : request.getCompanyBase());
                    company.setBaseAirdrome(Objects.isNull(request.getBaseAirdrome()) ? company.getBaseAirdrome() : request.getBaseAirdrome());
                    company.setTypesOfEnterprises(Objects.isNull(request.getTypesOfEnterprises()) ? company.getTypesOfEnterprises() : request.getTypesOfEnterprises());
                    company.setRegisteredCapital(Objects.isNull(request.getRegisteredCapital()) ? company.getRegisteredCapital() : request.getRegisteredCapital());
                    company.setLegalRepresentative(Objects.isNull(request.getLegalRepresentative()) ? company.getLegalRepresentative() : request.getLegalRepresentative());
                    company.setContactInformationOfLegalPerson(Objects.isNull(request.getContactInformationOfLegalPerson()) ? company.getContactInformationOfLegalPerson() : request.getContactInformationOfLegalPerson());
                    company.setTermOfValidity(Objects.isNull(request.getTermOfValidity()) ? company.getTermOfValidity() : request.getTermOfValidity());
                    company.setNatureOfBusiness(Objects.isNull(request.getNatureOfBusiness()) ? company.getNatureOfBusiness() : request.getNatureOfBusiness());
                    return companyRepository.save(company);
                })
                .orElseGet(() -> {
                    request.setCompanyId(companyId);
                    return companyRepository.save(request);
                });
}
    @DeleteMapping(path="/{companyId}")
    public ResponseEntity deleteCompany (@PathVariable final Integer companyId) {
        companyRepository.deleteById(companyId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Company> getAllCompanies() {
        // This returns a JSON or XML with the users
        return companyRepository.findAll();
    }
}
