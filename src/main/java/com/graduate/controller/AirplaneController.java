package com.graduate.controller;

import com.graduate.entity.Airplane;
import com.graduate.repository.AirplaneRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;

import java.util.Objects;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/airplane") // This means URL's start with /demo (after Application path)
public class AirplaneController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AirplaneRepository airplaneRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody Airplane addNewAirplane (@RequestBody final Airplane request) {
        return airplaneRepository.save(request);
    }

    @PutMapping(path="/edit/{airplaneId}")
    public @ResponseBody Airplane editAirplane (@PathVariable final Integer airplaneId,
                                        @Validated @RequestBody final Airplane request) {
        return airplaneRepository.findById(airplaneId)
                .map(airplane -> {
                    airplane.setAirplaneCompany(Objects.isNull(request.getAirplaneCompany()) ? airplane.getAirplaneCompany() : request.getAirplaneCompany());
                    airplane.setDateOfProduction(Objects.isNull(request.getDateOfProduction()) ? airplane.getDateOfProduction() : request.getDateOfProduction());
                    airplane.setNumberOfPeopleOnBoard(Objects.isNull(request.getNumberOfPeopleOnBoard()) ? airplane.getNumberOfPeopleOnBoard() : request.getNumberOfPeopleOnBoard());
                    return airplaneRepository.save(airplane);
                })
                .orElseGet(() -> {
                    request.setAirplaneId(airplaneId);
                    return airplaneRepository.save(request);
                });
}
    @DeleteMapping(path="/{airplaneId}")
    public ResponseEntity deleteAirplane (@PathVariable final Integer airplaneId) {
        airplaneRepository.deleteById(airplaneId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Airplane> getAllAirplanes() {
        // This returns a JSON or XML with the users
        return airplaneRepository.findAll();
    }
}
